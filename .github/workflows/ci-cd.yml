name: CI/CD - Tests, Package, (Optional Deploy)

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  tests:
    name: CI - Run pytest on ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]  # puedes ampliar a ["3.11","3.12","3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      # Ajusta esta ruta si tu src/tests no son los de ejemplo
      - name: Export PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE/lab4_tests_example/src" >> $GITHUB_ENV

      - name: Run tests
        run: |
          pytest lab4_tests_example/tests \
            --maxfail=1 -q \
            --cov=lab4_tests_example \
            --cov-report=term-missing \
            --junitxml=pytest-junit.xml

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports
          path: |
            pytest-junit.xml

  delivery:
    name: CD - Package deliverable (zip artifact)
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Empaquetado simple: zip del proyecto listo para ejecutar/pruebas
      - name: Create deliverable zip
        run: |
          mkdir -p dist
          zip -r dist/project-deliverable.zip \
            lab4_tests_example \
            -x "**/__pycache__/*" "**/.pytest_cache/*" ".git/*" ".github/*"

      - name: Upload deliverable artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-deliverable
          path: dist/project-deliverable.zip
          if-no-files-found: error

  deploy:
    name: (Optional) CD - Deploy to server via SSH + Docker
    needs: delivery
    if: github.ref == 'refs/heads/main' && !cancelled() && !failure()
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        if: ${{ secrets.ENABLE_DOCKER_CD == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        if: ${{ secrets.ENABLE_DOCKER_CD == 'true' }}
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/app:${{ github.sha }}
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Deploy via SSH
        if: ${{ secrets.ENABLE_DOCKER_CD == 'true' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            IMAGE=ghcr.io/${{ github.repository }}/app:${{ github.sha }}
            docker pull "$IMAGE"
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:8000 "$IMAGE"
